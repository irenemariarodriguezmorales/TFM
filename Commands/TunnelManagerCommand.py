# Importaciones necesarias de librer√≠as
import subprocess
# Importaciones necesarias de las clases
from rich.console import Console
from rich.prompt import Prompt
from Connection.Tunnel import Tunnel

"""
Clase que permite al usuario gestionar t√∫neles SSH.
Proporciona un men√∫ interactivo para crear t√∫neles locales o remotos. Tambi√©n permite visualizar
los t√∫neles activos actualmente en el sistema.

Utiliza la clase Tunnel para crear los t√∫neles y utiliza el cliente SSH activo
proporcionado por SSHConnection.
"""


class TunnelManagerCommand:
    """
    Constructor de la clase. Inicializa las variables necesarias para la gesti√≥n de t√∫neles.

    :param ssh_connection: Instancia activa de SSHConnection con los datos de la sesi√≥n SSH actual.
    """

    def __init__(self, ssh_connection):
        self.console = Console()
        self.ssh_connection = ssh_connection
        self.host = ssh_connection.host
        self.username = ssh_connection.username
        self.port = ssh_connection.port

    """
    M√©todo principal que muestra el men√∫ de opciones para gestionar t√∫neles SSH.
    Permite al usuario elegir entre crear un t√∫nel local, uno remoto, ver t√∫neles activos o salir.
    """

    def run(self):
        self.console.print("[bold blue]üîå Gesti√≥n de T√∫neles SSH[/bold blue]")

        options = {
            "1": ("Crear t√∫nel local (Local Forwarding)", self.local_tunnel),
            "2": ("Crear t√∫nel remoto (Remote Forwarding)", self.remote_tunnel),
            "3": ("Ver t√∫neles activos", self.list_active_tunnels),
            "4": ("Volver", lambda: None)
        }

        while True:
            # Muestra todas las opciones disponibles en el men√∫
            for key, (desc, _) in options.items():
                self.console.print(f"[cyan]{key}[/cyan]. {desc}")
            # Solicita al usuario que seleccione una opci√≥n del men√∫
            choice = Prompt.ask("\nSeleccione una opci√≥n", choices=list(options.keys()))
            if choice == "4":
                break # Opci√≥n "Volver"

            _, action = options[choice]
            action()

    """
    M√©todo que solicita los datos necesarios y crea un t√∫nel local.
    Verifica primero si el usuario ha generado y copiado sus claves SSH.
    """

    def local_tunnel(self):
        if not self.ssh_connection.check_keys():
            return

        local_port = Prompt.ask("[ ] Puerto local (ej: 8080)")
        remote_host = Prompt.ask("[ ] Host remoto (ej: localhost)")
        remote_port = Prompt.ask("[ ] Puerto remoto (ej: 3306)")
        # Se delega en la clase Tunnel la creaci√≥n del t√∫nel
        Tunnel.create_local(self.username, self.host, self.port, local_port, remote_host, remote_port)

    """
    M√©todo que solicita los datos necesarios y crea un t√∫nel remoto.
    Verifica primero si el usuario ha generado y copiado sus claves SSH.
    """

    def remote_tunnel(self):
        if not self.ssh_connection.check_keys():
            return

        remote_port = Prompt.ask("[ ] Puerto remoto (ej: 9090)")
        local_host = Prompt.ask("[ ] Host local (ej: localhost)")
        local_port = Prompt.ask("[ ] Puerto local (ej: 3000)")
        # se delega en la clase Tunnel la creaci√≥n del t√∫nel
        Tunnel.create_remote(self.username, self.host, self.port, remote_port, local_host, local_port)

    """
    M√©todo que analiza los procesos en ejecuci√≥n del sistema para encontrar t√∫neles SSH activos.
    Busca comandos ssh con las opciones -L o -R que indican t√∫neles locales o remotos.
    Muestra los resultados al usuario de forma legible.
    """
    def list_active_tunnels(self):
        self.console.print("\n[bold yellow]üîç Buscando t√∫neles SSH activos...[/bold yellow]\n")

        try:
            # Ejecuta el comando ps aux para obtener todos los procesos del sistema
            result = subprocess.run(
                ["ps", "aux"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            # Filtra procesos que son conexiones SSH con t√∫neles locales (-L) o remotos (-R)
            ssh_lines = [
                line for line in result.stdout.splitlines()
                if "ssh" in line and (" -L" in line or " -R" in line)
            ]
            # Si no hay resultados, lo indica al usuario
            if not ssh_lines:
                self.console.print("[dim]No se encontraron t√∫neles SSH activos.[/dim]")
                return
            # Muestra cada l√≠nea encontrada como un t√∫nel activo
            for line in ssh_lines:
                self.console.print(f"[green]‚úî[/green] {line}")

        except Exception as e:
            self.console.print(f"[red]‚úñ Error al obtener t√∫neles activos:[/red] {e}")
