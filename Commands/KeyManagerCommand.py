# Importaciones necesarias de librer√≠as
import os
import subprocess
from rich.console import Console
from rich.prompt import Prompt
from rich.panel import Panel
# Importaciones necesarias de las clases
from Connection.SSHConnection import SSHConnection

"""
Clase que gestiona la funcionalidad relacionada con claves SSH.
Permite:
- Generar un par de claves localmente
- Copiar la clave p√∫blica al servidor remoto
- Visualizar claves autorizadas en el servidor
"""


class KeyManagerCommand:
    """
    Costructor que inicializa el administrador de claves.
    :param ssh_client: Cliente SSH (puede ser None si no existe conexi√≥n, para la opci√≥n 2 se pide conectar)
    """

    def __init__(self, ssh_client=None):
        self.client = ssh_client  # Puede ser None si no hay conexi√≥n activa
        self.console = Console()

    """
    M√©todo principal de la clase que muestra el men√∫ para la generaci√≥n de claves SSH 
    y permite al usuario seleccionar una acci√≥n.
    """

    def run(self):
        self.console.print(Panel("üîê [bold]Gesti√≥n de claves SSH[/bold]", style="magenta"))

        options = {
            "1": ("Generar par de claves SSH localmente", self.generate_local_keys),
            "2": ("Copiar clave p√∫blica al servidor remoto", self.copy_key_to_server),
            "3": ("Ver claves existentes en el servidor", self.list_server_keys),
            "4": ("Volver", lambda: None)
        }

        """
        Este bucle muestra el submen√∫ al haber clicado en la funcionalidad de gestionar claves SSH.
        Gracias este bucle el usuario puede observar todas las opciones que puede realizar
        """
        while True:
            for key, (desc, _) in options.items():
                self.console.print(f"[cyan]{key}[/cyan]. {desc}")

            choice = Prompt.ask("\nSeleccione una opci√≥n", choices=list(options.keys()))
            if choice == "4":
                break  # Vuelve al men√∫ principal

            _, action = options[choice]
            action()  # Ejecuta la opci√≥n seleccionada llamando a su correspondiente clase (responsabilidad delegada)

    """
    M√©todo que genera un par de claves SSH (privada y p√∫blica) localmente en la ruta indicada por el usuario.
    Las claves se guardan con nombres fijos: clave_privada y clave_publica.pub
    """

    def generate_local_keys(self):
        self.console.print("\n[bold blue]üõ† Generar par de claves SSH[/bold blue]")

        # Se le pregunta al usuario en qu√© directorio quiere guardar las claves
        folder = Prompt.ask(
            "[ ] Ruta del directorio donde guardar las claves",
            default="~/.ssh"
        )
        folder = os.path.expanduser(folder) #  Obtiene la ruta absoluta

        # Construir rutas completas para clave privada y p√∫blica
        private_key = os.path.join(folder, "clave_privada")
        public_key = os.path.join(folder, "clave_publica.pub")

        # Validar que no es una ruta inv√°lida (puede haber elegido un archivo sin querer)
        if os.path.isfile(folder):
            self.console.print(f"[red]‚úñ La ruta '{folder}' es un archivo, no un directorio.[/red]")
            return

        # Si ya existen las claves, preguntar si sobrescribirlas
        if os.path.exists(private_key) or os.path.exists(public_key):
            self.console.print(f"[yellow]‚ö† Ya existen claves en: {folder}[/yellow]")
            overwrite = Prompt.ask("[ ] ¬øDesea sobrescribirlas?", choices=["s√≠", "no"], default="no")
            if overwrite != "s√≠":
                self.console.print("[dim]Operaci√≥n cancelada por el usuario.[/dim]")
                return

        # Crear carpeta si no existe
        try:
            os.makedirs(folder, exist_ok=True)
            self.console.print(f"[blue]üìÅ Guardando claves en:[/blue] {folder}")

            # Intenta generar las claves con ssh-keygen
            subprocess.run([
                "ssh-keygen", "-t", "rsa", "-b", "2048",
                "-f", private_key, "-N", ""
            ], check=True)

            # Renombrar la clave p√∫blica para que el usuario pueda diferenciarlas mejor
            os.rename(private_key + ".pub", os.path.join(folder, "clave_publica.pub"))

            self.console.print(f"[green]‚úî Claves generadas correctamente.[/green]")
            self.console.print(f"[bold]üîê Clave privada:[/bold] {private_key}")
            self.console.print(f"[bold]üîì Clave p√∫blica:[/bold] {public_key}")

        except Exception as e:
            self.console.print(f"[red]‚úñ Error al generar las claves: {e}[/red]")

    """
    M√©todo que copia la clave p√∫blica local al archivo authorized_keys del servidor remoto.
    Si no hay conexi√≥n SSH activa, pregunta por realizar una conexi√≥n.
    """

    def copy_key_to_server(self):
        # Si no hay conexi√≥n SSH activa, se pregunta al usuario si quiere realizarla para poder seguir con la acci√≥n
        if not self.client:
            self.console.print("[yellow]‚ö† No hay conexi√≥n SSH activa.[/yellow]")
            wants_connect = Prompt.ask("[ ] ¬øDesea conectarse ahora al servidor?", choices=["s√≠", "no"], default="s√≠")
            if wants_connect != "s√≠":
                self.console.print("[dim]Operaci√≥n cancelada.[/dim]")
                return

            # Inicia una conexi√≥n SSH
            ssh_conn = SSHConnection.ask_user_connection_data()
            if not ssh_conn:
                self.console.print("[red]‚úñ No se pudo establecer la conexi√≥n SSH.[/red]")
                return

            self.client = ssh_conn.get_client()  # Guarda el cliente resultante

        # Solicita la ruta a la clave p√∫blica local
        pub_key_path = Prompt.ask(
            "[ ] Ruta de la clave p√∫blica a copiar",
            default="~/.ssh/clave_publica.pub"
        )
        # Convierte rutas que contienen ~ en rutas absolutas del usuario
        pub_key_path = os.path.expanduser(pub_key_path)

        # Condici√≥n que valida si la ruta proporcionada es correcta
        if not os.path.exists(pub_key_path):
            self.console.print(f"[red]‚úñ No se encontr√≥ la clave p√∫blica en: {pub_key_path}[/red]")
            return

        try:
            self.console.print("[blue]üîç Verificando directorio ~/.ssh en el servidor...[/blue]")
            # Crea el directorio .ssh en el home del usuario si no existe (-p no lanza error si el directorio ya existe)
            # y cambia los permisos del directorio .ssh a 700 (solo el propietario puede leer, escribir y acceder)
            self.client.exec_command("mkdir -p ~/.ssh && chmod 700 ~/.ssh")

            self.console.print("[blue]üì• Leyendo clave p√∫blica local...[/blue]")
            # Abre el archivo en modo lectura.
            # (Asegura cierre autom√°tico del archivo con with).
            with open(pub_key_path, "r") as pub_key_file:
                # Lee el contenido completo del archivo y elimina espacios y saltos de l√≠nea.
                pub_key = pub_key_file.read().strip()

            # Comprueba si la clave ya existe en el servidor
            stdin, stdout, stderr = self.client.exec_command(
                # Comando para leer (y si es necesario, crear) el archivo authorized_keys del servidor remoto,
                # donde se almacenan las claves p√∫blicas autorizadas para el acceso por SSH.
                "cat ~/.ssh/authorized_keys || touch ~/.ssh/authorized_keys")
            # Lee la salida del comando remoto (obtiene los bytes recibidos (read) y convierte esos bytes en texto).
            existing_keys = stdout.read().decode()

            # Condici√≥n para comprobar si la clave p√∫blica ya existe en el servidor
            if pub_key in existing_keys:
                self.console.print("[yellow]‚ö† La clave ya existe en el servidor.[/yellow]")
                return

            # Si la clave p√∫blica no existe en el servidor, se a√±ade
            self.console.print("[blue]üîê A√±adiendo clave p√∫blica a authorized_keys...[/blue]")
            # Busca todas las comillas dobles " dentro del texto pub_key y las reemplaza por \"
            # para que no rompan el comando echo en la shell
            escaped_key = pub_key.replace('"', r'\"')
            # Comando que a√±ade la clave p√∫blica al final del archivo authorized_keys del servidor remoto
            # Tambi√©n, se cambian los permisos para que sean correctos.
            self.client.exec_command(
                f'echo "{escaped_key}" >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys')

            self.console.print("[green]‚úî Clave p√∫blica copiada y autorizada correctamente en el servidor.[/green]")

        except Exception as e:
            self.console.print(f"[red]‚úñ Error al copiar la clave: {e}[/red]")

    """
    M√©todo que muestra todas las claves p√∫blicas autorizadas actualmente en el servidor remoto 
    (archivo authorized_keys). Si no hay conexi√≥n SSH activa, ofrece al usuario realizarla.
    """

    def list_server_keys(self):
        # Verifica si hay cliente SSH activo
        if not self.client:
            self.console.print("[yellow]‚ö† No hay conexi√≥n SSH activa.[/yellow]")
            wants_connect = Prompt.ask("[ ] ¬øDesea conectarse ahora al servidor?", choices=["s√≠", "no"], default="s√≠")
            if wants_connect != "s√≠":
                self.console.print("[dim]Operaci√≥n cancelada.[/dim]")
                return

            # Inicia nueva conexi√≥n SSH
            ssh_conn = SSHConnection.ask_user_connection_data()
            if not ssh_conn:
                self.console.print("[red]‚úñ No se pudo establecer la conexi√≥n SSH.[/red]")
                return

            self.client = ssh_conn.get_client() # Guarda el cliente resultante

        try:
            # Ejecuta el comando remoto para leer el archivo authorized_keys
            stdin, stdout, stderr = self.client.exec_command("cat ~/.ssh/authorized_keys")
            output = stdout.read().decode().strip()

            # Muestra el contenido si hay claves
            if output:
                self.console.print(Panel(output, title="üîë Claves autorizadas en el servidor", style="cyan"))
            else:
                self.console.print("[yellow]No hay claves autorizadas registradas en el servidor.[/yellow]")

        except Exception as e:
            self.console.print(f"[red]‚úñ Error al listar claves: {e}[/red]")
