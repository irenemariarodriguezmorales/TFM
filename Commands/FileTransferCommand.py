# Importaciones necesarias de librer√≠as
import os
from rich.console import Console
from rich.prompt import Prompt
from rich.panel import Panel
import subprocess

"""
Clase encargada de controlar la transferencia de archivos mediante SFTP sobre una conexi√≥n SSH que ya existe.
Permite al usuario subir o descargar archivos.
"""


class FileTransferCommand:
    """
    Constructor que inicializa la clase con el cliente SSH proporcionado.
    :param ssh_client: Objeto de conexi√≥n SSH.
    """

    def __init__(self, ssh_client):
    #def __init__(self, ssh_client, host, username, port):

        self.client = ssh_client
        self.console = Console()
        self.sftp = None  # SFTP se inicializa en tiempo de ejecuci√≥n

    """
    M√©todo principal de la clase que muestra el men√∫ de transferencia de archivos (subir/descargar).
    Pregunta las rutas de origen y destino seg√∫n la acci√≥n seleccionada por el usuario.
    """

    def run(self):
        self.console.print(Panel("üìÇ [bold]Transferencia de archivos por SSH[/bold]", style="green"))

        # Pregunta qu√© acci√≥n desea hacer el usuario
        action = Prompt.ask(
            "[ ] ¬øQu√© desea hacer?",
            choices=["subir", "descargar", "volver"],
            default="subir"
        )

        if action == "volver":
            return

        # Pregunta qu√© protocolo quiere utilizar para la transferencia
        protocol = Prompt.ask(
            "[ ] ¬øQu√© protocolo desea utilizar?",
            choices=["sftp", "scp"],
            default="sftp"
        )

        try:
            if protocol == "sftp":
                # Abre sesi√≥n SFTP sobre el cliente SSH
                self.sftp = self.client.open_sftp()

                if action == "subir":  # Si el usuario decide subir un archivo al servidor remoto
                    local_path = Prompt.ask("[üìÅ] Ruta del archivo local")
                    remote_path = Prompt.ask("[üóÇÔ∏è] Ruta destino en el servidor")

                    # Si el destino parece ser un directorio, se a√±ade el nombre del archivo autom√°ticamente
                    if remote_path.endswith("/") or "." not in os.path.basename(remote_path):
                        filename = os.path.basename(local_path)
                        remote_path = os.path.join(remote_path, filename).replace("\\", "/")

                    self.transfer_file("put", local_path, remote_path)

                elif action == "descargar":  # Si el usuario quiere descargar en local un archivo que est√° en el servidor
                    remote_path = Prompt.ask("[üóÇÔ∏è] Ruta del archivo en el servidor")
                    local_path = Prompt.ask("[üìÅ] Ruta destino en tu equipo")

                    # Si el destino es un directorio, se a√±ade el nombre del archivo del servidor
                    if os.path.isdir(local_path):
                        filename = os.path.basename(remote_path)
                        local_path = os.path.join(local_path, filename)

                    self.transfer_file("get", remote_path, local_path)

                # Cierra sesi√≥n SFTP
                self.sftp.close()

            """
            elif protocol == "scp":
                if action == "subir":
                    local_path = Prompt.ask("[üìÅ] Ruta del archivo local")
                    remote_path = Prompt.ask("[üóÇÔ∏è] Ruta destino en el servidor")
                    scp_cmd = [
                        "scp", "-P", str(self.port),
                        local_path,
                        f"{self.username}@{self.host}:{remote_path}"
                    ]
                elif action == "descargar":
                    remote_path = Prompt.ask("[üóÇÔ∏è] Ruta del archivo en el servidor")
                    local_path = Prompt.ask("[üìÅ] Ruta destino en tu equipo")
                    scp_cmd = [
                        "scp", "-P", str(self.port),
                        f"{self.username}@{self.host}:{remote_path}",
                        local_path
                    ]

                subprocess.run(scp_cmd, check=True)
                self.console.print(f"[bold green]‚úî Transferencia SCP completada correctamente[/bold green]")
                """

        except Exception as e:
            self.console.print(f"[bold red]‚úñ Error durante la transferencia: {e}[/bold red]")

    """
    M√©todo que realiza la transferencia de archivos usando put o get seg√∫n la opci√≥n elegida por el usuario.
    :param sftp_method: 'put' para subir o 'get' para descargar
    :param src: Ruta origen del archivo
    :param dest: Ruta destino del archivo
    """

    def transfer_file(self, sftp_method, src, dest):
        try:
            if sftp_method == "put":
                self.sftp.put(src, dest)
            else:
                self.sftp.get(src, dest)

            self.console.print(f"[bold green]‚úî Transferencia completada: {os.path.basename(dest)}[/bold green]")
        except Exception as e:
            self.console.print(f"[bold red]‚úñ Error en la transferencia: {e}[/bold red]")
