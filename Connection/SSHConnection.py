# Importaciones necesarias de librer√≠as
import os
import paramiko
from rich.console import Console
from rich.prompt import Prompt
import subprocess
import pexpect
# Importaciones necesarias de otras clases
from Commands.CommandsExecutorCommand import CommandsExecutorCommand
from Commands.FileTransferCommand import FileTransferCommand
from Connection.ConnectionConfig import ConnectionConfig

"""
Es la clase que permite realizar conexiones SSH al servidor utilizando la librer√≠a paramiko.
Posse toda la l√≥gica para realizar conexiones SSH, obtenci√≥n de shell interactiva (para ejecutar comandos remotamente,
m√©todo get_shell()), ejecuci√≥n de su propio submen√∫ para realizar acciones una vez establecida la sesi√≥n SSH 
y cerrar la sesi√≥n SSH.
"""


class SSHConnection:
    """
    Este es el constructor donde se inicializa la conexi√≥n SSH con los par√°metros necesarios.

    :param host: Direcci√≥n del servidor remoto (IP o nombre de host)
    :param username: Nombre de usuario SSH
    :param port: Puerto SSH (por defecto 22)
    """

    def __init__(self, host, username, port=22, auth_method="contrase√±a"):
        self.host = host
        self.username = username
        self.port = int(port)
        self.auth_method = auth_method
        self.client = paramiko.SSHClient()
        self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        self.console = Console()
        self.shell = None  # Se pone a True cuando se inicia el shell interactivo (para ejecutar comandos remotamente)

    """
    Es un m√©todo est√°tico que solicita al usuario los datos de conexi√≥n SSH.
    Es est√°tico porque no necesita una instancia previa de la clase para funcionar.
    Devuelve una instancia de SSHConnection ya conectada o None si falla.
    Llama al met√≥do connect() para poder realizar el intento de conexi√≥n SSH con el servidor.
    """

    @staticmethod
    def create_connection():
        host, username, port, auth_method = ConnectionConfig.ask_user_connection_data()

        connection = SSHConnection(host, username, port, auth_method)  # Llama al constructor para crear una instancia
        if connection.connect():  # Se llama al m√©todo connect() para establecer una conexi√≥n
            return connection
        else:
            return None

    """
    Muestra el submen√∫ tras la conexi√≥n SSH exitosa.
    El usuario puede ejecutar comandos remotamente, transferir archivos o cerrar sesi√≥n.
    """

    def show_session_menu(self):
        console = Console()
        options = {
            "1": ("Ejecutar comandos remotos", lambda: CommandsExecutorCommand(self.shell).run()),  # shell interactiva
            "2": ("Transferir archivos", lambda: FileTransferCommand(self.client, self.host, self.username, self.port).run()),
            "3": ("Volver al men√∫ principal", None)
        }

        """
        Este bucle muestra el submen√∫ una vez que se ha realizado SSH al servidor.
        El bucle termina cuando el usuario elige la opci√≥n "3"
        Gracias este bucle el usuario puede observar todas las opciones que puede realizar
        """
        while True:
            console.print("\n[bold]Opciones disponibles:[/bold]")
            for key, (desc, _) in options.items():
                console.print(f"[cyan]{key}[/cyan]. {desc}")

            choice = Prompt.ask("Seleccione una opci√≥n", choices=list(options.keys()))
            if choice == "3":
                self.close()  # Cierra la conexi√≥n y vuelve al men√∫ principal
                break

            _, action = options[choice]
            if action:
                action()  # Ejecuta la opci√≥n seleccionada llamando a su correspondiente clase(responsabilidad delegada)

    """
    M√©todo que establece una conexi√≥n SSH solicitando datos al usuario.
    Tambi√©n, inicializa un shell interactivo para ejecutar comandos en tiempo real.
    """

    def connect(self):
        try:
            # Si el usuario quiere realizar la autenticaci√≥n por contrase√±a entra por esta condici√≥n
            if self.auth_method == "contrase√±a":
                password = self.console.input("[üîê] Introduzca su contrase√±a SSH: ")

                # Se procede con la conexi√≥n SSH
                self.client.connect(
                    hostname=self.host,
                    username=self.username,
                    password=password,
                    port=self.port,
                    look_for_keys=False,
                    allow_agent=False,
                )

            # Si el usuario quiere realizar la autenticaci√≥n por clave entra por esta condici√≥n
            elif self.auth_method == "clave":
                #  Pregunta primero si tiene generada una clave privada
                if not self.check_keys():
                    return
                # Pregunta por la ruta de la clave privada
                key_path = Prompt.ask(
                    "[ ] Ruta de la clave privada",
                    default="~/.ssh/clave_privada"
                )
                # Obtiene la ruta absoluta de la clave privada
                key_path = os.path.expanduser(key_path)

                # Comprueba si la clave privada existe en la ruta proporcionada (puede haber elegido un directorio)
                if not os.path.exists(key_path):
                    raise Exception(f"No se encontr√≥ la clave privada en {key_path}")

                # Se procede con la conexi√≥n SSH
                private_key = paramiko.RSAKey.from_private_key_file(key_path)
                self.client.connect(
                    hostname=self.host,
                    username=self.username,
                    pkey=private_key,
                    port=self.port,
                    look_for_keys=False,
                    allow_agent=False,
                )

            # Si el usuario quiere realizar la autenticaci√≥n por agente SSH entra por esta condici√≥n
            elif self.auth_method == "agente":
                #  Pregunta primero si tiene generada una clave privada
                if not self.check_keys():
                    return
                # Crea una instancia del agente SSH de la librer√≠a Paramiko.
                # Intenta conectarse al ssh-agent del sistema operativo (proceso en segundo plano que guarda claves
                # privadas en memoria RAM).
                agent = paramiko.Agent()
                # Devuelve una lista de claves privadas que est√°n actualmente cargadas en el agente SSH
                agent_keys = agent.get_keys()

                # Si no hay claves cargadas, se pregunta al usuario si quiere a√±adirla al agente
                if not agent_keys:
                    self.console.print("[yellow]‚ö† No hay claves disponibles en el agente SSH[/yellow]")
                    wants_to_add = Prompt.ask("[ ] ¬øDesea a√±adir una clave al agente ahora?", choices=["s√≠", "no"], default="s√≠")

                    # Si el usuario dice que s√≠, entra por este camino
                    if wants_to_add == "s√≠":
                        key_path = Prompt.ask("[ ] Ruta de la clave privada a a√±adir", default="~/.ssh/clave_privada")
                        key_path = os.path.expanduser(key_path)  # Obtiene ruta absoluta

                        if not os.path.exists(key_path):  # Si no encuentra la clave privada, salta error
                            raise Exception(f"No se encontr√≥ la clave privada en {key_path}")

                        try:
                            subprocess.run(["ssh-add", key_path], check=True)  # A√±ade la clave al agente
                            self.console.print("[green]‚úî Clave a√±adida correctamente al agente SSH[/green]")

                            # Reintentar obtener claves desde el agente
                            agent_keys = paramiko.Agent().get_keys()

                            if not agent_keys:
                                raise Exception("No se pudo cargar la clave en el agente SSH")

                        except Exception as e:
                            raise Exception(f"No se pudo a√±adir la clave al agente SSH: {e}")
                    else:
                        # Si el usuario no quiere a√±adir agente, se retorna
                        return

                # Si se encuentra al menos una clave, se utiliza la primera disponible para establecer la conexi√≥n
                self.client.connect(
                    hostname=self.host,
                    username=self.username,
                    pkey=agent_keys[0],
                    port=self.port,
                    look_for_keys=False,
                    allow_agent=True
                )

            # Si el usuario quiere realizar la autenticaci√≥n por certificado digital
            elif self.auth_method == "certificado":
                #  Pregunta primero si tiene generada una clave privada
                if not self.check_keys():
                    return
                self.console.print("[bold blue]üîê Autenticaci√≥n por certificado digital[/bold blue]")
                ca_key_path = None  # Se usar√° solo si es necesario

                # 1. ¬øYa tienes un certificado firmado?
                has_cert = Prompt.ask("[ ] ¬øTiene ya un certificado digital generado?", choices=["s√≠", "no"],
                                      default="no")

                if has_cert == "no":
                    # 2. ¬øQuieres generarlo ahora?
                    wants_generate = Prompt.ask("[ ] ¬øDesea generar uno ahora?", choices=["s√≠", "no"], default="s√≠")
                    if wants_generate == "no":
                        self.console.print("[yellow]‚ùå Cancelando autenticaci√≥n por certificado...[/yellow]")
                        return

                    # 3. Ruta a la clave p√∫blica que ser√° firmada
                    pub_key_path = Prompt.ask(
                        "[ ] Ruta de la clave p√∫blica a firmar",
                        default="~/.ssh/clave_publica.pub"
                    )
                    pub_key_path = os.path.expanduser(pub_key_path)

                    if not os.path.exists(pub_key_path):
                        raise Exception(f"No se encontr√≥ la clave p√∫blica en: {pub_key_path}")

                    # 4. Ruta del directorio para guardar la clave de la CA
                    ca_folder = Prompt.ask("[ ] Ruta del directorio para guardar la clave de la CA", default="~/.ssh")
                    ca_folder = os.path.expanduser(ca_folder)
                    os.makedirs(ca_folder, exist_ok=True)

                    ca_key_path = os.path.join(ca_folder, "ca")

                    # 5. Generar clave CA si no existe
                    if not os.path.exists(ca_key_path):
                        self.console.print(f"[yellow]‚ö† No se encontr√≥ una clave de CA en {ca_key_path}[/yellow]")
                        create_ca = Prompt.ask("[ ] ¬øDesea generar una nueva clave de CA?", choices=["s√≠", "no"],
                                               default="s√≠")
                        if create_ca == "s√≠":
                            subprocess.run(["ssh-keygen", "-t", "rsa", "-b", "2048", "-f", ca_key_path, "-N", ""],
                                           check=True)
                            self.console.print(f"[green]‚úî Clave de CA generada correctamente en: {ca_key_path}[/green]")
                        else:
                            self.console.print("[red]‚úñ No se puede continuar sin clave de CA.[/red]")
                            return

                    # 6. Generar certificado
                    cert_path = pub_key_path.replace(".pub", "-cert.pub")
                    subprocess.run([
                        "ssh-keygen", "-s", ca_key_path,
                        "-I", self.username,
                        "-n", self.username,
                        "-V", "+52w",
                        "-z", "1",
                        pub_key_path
                    ], check=True)
                    self.console.print(f"[green]‚úî Certificado generado correctamente en:[/green] {cert_path}")

                    private_key_path = Prompt.ask("[ ] Ruta de la clave privada asociada",
                                                  default="~/.ssh/clave_privada")

                    private_key_path = os.path.expanduser(private_key_path)

                    if not os.path.exists(private_key_path):
                        raise Exception(f"No se encontr√≥ la clave privada en: {private_key_path}")

                else:
                    # 7. Pedir ruta del certificado y de la clave privada asociada
                    cert_path = Prompt.ask("[ ] Ruta del certificado digital (.pub)",
                                           default="~/.ssh/clave_publica-cert.pub")
                    cert_path = os.path.expanduser(cert_path)

                    private_key_path = Prompt.ask("[ ] Ruta de la clave privada asociada",
                                                  default="~/.ssh/clave_privada")
                    private_key_path = os.path.expanduser(private_key_path)

                    if not os.path.exists(cert_path) or not os.path.exists(private_key_path):
                        raise Exception("No se encontraron los archivos necesarios para la autenticaci√≥n")

                    # 8. Preguntar tambi√©n por la clave de la CA si se va a subir
                    ca_key_path = Prompt.ask("[ ] Ruta de la clave p√∫blica de la CA", default="~/.ssh/ca.pub")
                    ca_key_path = os.path.expanduser(ca_key_path).replace(".pub", "")  # quitar extensi√≥n si la ten√≠a

                # 9. Autenticaci√≥n SSH con la clave privada
                private_key = paramiko.RSAKey.from_private_key_file(private_key_path)
                self.client.connect(
                    hostname=self.host,
                    username=self.username,
                    pkey=private_key,
                    port=self.port,
                    look_for_keys=False,
                    allow_agent=False,
                )

                # 10. Subir clave p√∫blica de la CA (si existe)
                if ca_key_path:
                    self.console.print("[blue]üì¶ Subiendo clave p√∫blica de la CA al servidor...[/blue]")
                    sftp = self.client.open_sftp()
                    try:
                        sftp.mkdir(".ssh")
                    except IOError:
                        pass
                    sftp.put(ca_key_path + ".pub", ".ssh/ca.pub")
                    sftp.close()

                # 11. Configurar el servidor remoto para aceptar certificados
                cmd = "echo 'TrustedUserCAKeys ~/.ssh/ca.pub' >> /etc/ssh/sshd_config && systemctl restart ssh"

                # Intentar primero sin contrase√±a
                stdin, stdout, stderr = self.client.exec_command(f"sudo -n bash -c \"{cmd}\"")
                exit_status = stdout.channel.recv_exit_status()

                if exit_status != 0:
                    self.console.print(
                        "[yellow]‚ö† No se pudo ejecutar sudo sin contrase√±a. Intentando con contrase√±a...[/yellow]")

                    # Pedir la contrase√±a SSH al usuario
                    ssh_password = Prompt.ask("[üîê] Introduzca su contrase√±a SSH para sudo", password=True)

                    # Llamada para introducir contrase√±a para usar sudo
                    output, error = self.run_sudo_command(ssh_password, cmd)

                    if error:
                        raise Exception(f"No se pudo configurar el servidor para aceptar certificados: {error}")
                    else:
                        self.console.print(
                            "[green]‚úî Servidor configurado para aceptar certificados usando sudo con contrase√±a[/green]")
                else:
                    self.console.print("[green]‚úî Servidor configurado correctamente con sudo sin contrase√±a[/green]")

            """
            El m√©todo invoke_shell() crea una shell interactiva. Esta inicializaci√≥n sirve para que el usuario, si 
            elige la opci√≥n de ejecutar comandos remotos en el submen√∫ que esta misma clase realiza, 
            pueda realizarlo sin ning√∫n problema. 
            """
            self.shell = self.client.invoke_shell()
            self.console.print("\n[i] Estado: [bold green]Conectado[/bold green]")
            return True

        except Exception as e:
            raise Exception(f"No se pudo conectar: {str(e)}")

    """
    M√©todo auxiliar que se utiliza en la autenticaci√≥n por clave, agente y certificado para preguntar si ya tiene
    las claves generadas y la clave p√∫blica enviada al servidor remoto (estos pasos son necesarios para estos tres
    tipos de autenticaci√≥n)
    """
    def check_keys(self):
        from Commands.KeyManagerCommand import KeyManagerCommand
        tiene_claves = Prompt.ask(
            "[ ] ¬øYa ha generado las claves SSH (p√∫blica y privada)?",
            choices=["s√≠", "no"],
            default="s√≠"
        )
        if tiene_claves == "no":
            self.console.print("[red]‚úñ Debe generar las claves SSH primero. Redirigiendo...[/red]")
            KeyManagerCommand().generate_local_keys()
            return False

        clave_enviada = Prompt.ask(
            "[ ] ¬øHa enviado la clave p√∫blica al servidor remoto?",
            choices=["s√≠", "no"],
            default="s√≠"
        )
        if clave_enviada == "no":
            self.console.print("[red]‚úñ Debe copiar la clave p√∫blica al servidor. Utilice la autenticaci√≥n por"
                               " contrase√±a para enviarla. Redirigiendo...[/red]")
            KeyManagerCommand().copy_key_to_server()
            return False

        return True

    """
    M√©todo que ejecuta un comando remoto con privilegios de sudo, 
    incluso si el servidor requiere introducir una contrase√±a.
    Se utiliza en la autenticaci√≥n por certificado
    """

    def run_sudo_command(self, password, command):
        ssh_command = f"ssh -p {self.port} {self.username}@{self.host} 'sudo -S {command}'"
        child = pexpect.spawn(ssh_command, encoding='utf-8', timeout=10)
        try:
            i = child.expect([r"\[sudo\] password for .*:", pexpect.EOF, pexpect.TIMEOUT])
            if i == 0:
                child.sendline(password)
                child.expect(pexpect.EOF)
            output = str(child.before) + str(child.after)
            return output, None
        except pexpect.ExceptionPexpect as e:
            return "", str(e)

    """
    M√©todo que devuelve el shell interactivo para ejecutar comandos en tiempo real
    """

    def get_shell(self):
        return self.shell

    """
    M√©todo que devuelve el cliente SSH (gracias a paramiko) para realizar operaciones como SFTP o exec_command.
    """

    def get_client(self):
        return self.client

    """
    M√©todo que cierra la conexi√≥n SSH y muestra un mensaje de estado.
    """

    def close(self):
        if self.client:
            self.client.close()
            self.console.print("[i] Estado: [bold yellow]Conexi√≥n cerrada[/bold yellow]")
